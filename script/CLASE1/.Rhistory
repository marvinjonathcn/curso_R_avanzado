skip = 10 , stringsAsFactors = F,
na.strings = "S/D")
}
View(df_list)
df <- Reduce(function(...) merge(... , all=TRUE), df_list)
View(df)
View(df)
View(df)
df$date = as.POSIXct(paste(df[,1], df[,2], sep = " "),
format = "%Y/%m/%d %H:%M")
View(df)
View(df)
df <- df[,-c(1,2)]
View(df)
df <- df[, c(6,1:5)]
View(df)
colnames(df) <- c("date", "TEMP", "PP", "HUM", "DIR_V", "VEL_V")
View(df)
library(DataExplorer)
library(DataExplorer)
# VISUALIZAR LA ESCTRUCTURA DE NUESTRA DATA
plot_str(df)
# RESUMEN DE NUESTROS DATOS
introduce(df)
# RESUMEN DE NUESTROS DATOS
introduce(df)
profile_missing(df)
plot_intro(df)
# VALORES FALTANTES O MISSING
plot_missing(df)
profile_missing(df)
# HISTOGRAMA
plot_histogram(df)
# QQPLOT
plot_qq(df)
# HISTOGRAMA
dev.new()
plot_histogram(df)
# HISTOGRAMA
dev.new()
# QQPLOT
plot_qq(df)
# ANALISIS DE CORRELACIÓN
plot_correlation(na.omit(df))
# VALORES FALTANTES O MISSING
plot_missing(df)
# ANALISIS DE CORRELACIÓN
plot_correlation(na.omit(df))
# BOXPLOT
ggplot(stack(df), aes(x = ind, y = values)) +
geom_boxplot()
library(ggplot2)
library(RSelenium)
library(DataExplorer)
# BOXPLOT
ggplot(stack(df), aes(x = ind, y = values)) +
geom_boxplot()
View(df)
View(df)
stack(df)
stack(df)
ggplot(stack(df), aes(x = date, y = HUM)) +
geom_boxplot()
ggplot(stack(df), aes(x = date, y = HUM)) +
geom_boxplot()
ggplot(df, aes(x = date, y = HUM)) +
geom_boxplot()
# SCATTER PLOT
library(reshape2)
df_sp <- melt(df[,c(1,2,4)], id.vars = 'date', variable.name = 'Variables')
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
facet_grid(Variables ~ .)
View(df_sp)
View(df)
View(df)
df_sp <- melt(df[,c(1,2,4,6)], id.vars = 'date', variable.name = 'Variables')
View(df_sp)
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
facet_grid(Variables ~ .)
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
facet_grid(Variables ~ .) +
scale_color_brewer()
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
facet_grid(Variables ~ .) +
scale_color_brewer(palette = "Set3")
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
facet_grid(Variables ~ .) +
scale_color_brewer(palette = "Paired")
View(df)
df_sp <- melt(df[,c(1,2,4)], id.vars = 'date', variable.name = 'Variables')
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
facet_grid(Variables ~ .) +
scale_color_brewer(palette = "Paired")
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
geom_smooth() +
facet_grid(Variables ~ .) +
scale_color_brewer(palette = "Paired")
ggplot(df_sp, aes(date,value, color = Variables)) +
geom_line() +
geom_smooth() +
facet_grid(Variables ~ .) +
scale_color_brewer(palette = "Spectral")
ggplot(df_sp, aes(date,value)) +
geom_line() +
geom_smooth() +
facet_grid(Variables ~ .) +
scale_color_brewer(palette = "Spectral")
ggplot(df_sp, aes(date,value)) +
geom_line() +
geom_smooth() +
facet_grid(Variables ~ .)
ggplot(df, aes(date,TEMP)) +
geom_line() +
geom_smooth()
ggplot(df, aes(date,HUM)) +
geom_line() +
geom_smooth()
ggplot(df, aes(date,TEMP)) +
geom_line() +
geom_smooth()
ggplot(df, aes(date,HUM)) +
geom_line() +
geom_smooth()
ggplot(df, aes(date,PP)) +
geom_line() +
geom_smooth()
ggplot(df, aes(date,PP)) +
geom_bar()
ggplot(df, aes(date,PP)) +
geom_histogram()
ggplot(df, aes(PP)) +
geom_histogram()
ggplot(df_sp, aes(date,value)) +
geom_line() +
geom_smooth() +
facet_grid(Variables ~ )
ggplot(df_sp, aes(date,value)) +
geom_line() +
geom_smooth() +
facet_grid(Variables ~ .)
str(df)
summary(df)
# ELIMINAR LAS FILAS QUE CONTIENEN VALORES NA
df_complete <- na.omit(df)
summary(df_complete)
df_complete <- df[complete.cases(df),]
# COMPLETAR VALORES NA MEDIANTE IMPUTACION MULTIPLE
library(mice)
# COMPLETAR VALORES NA MEDIANTE IMPUTACION MULTIPLE
library(mice)
df_mice <- mice(df,m=5,maxit=50,meth='rf',seed=500)
df_mice <- mice(df,m=5,maxit=50,meth='cart',seed=500)
df_mice <- mice(df,m=5,maxit=10,meth='cart',seed=500)
summary(df_mice)
df_complete <- complete(df_mice,1)
summmary(df_complete)
summary(df_complete)
summary(df)
summary(df_complete)
nrow(df)
nrow(df_complete)
df_complete <- complete(df_mice,1)
df <- df_complete
# ELIMINAR VALORES OUTLIERS UNIVARIABLES MEDIANTE BOXPLOT
boxplot.stats(df$VEL_V)$out
boxplot(df$VEL_V)
boxplot.stats(df$TEMP)$out
boxplot.stats(df$PP)$out
boxplot.stats(df$HUM)$out
boxplot.stats(df$DIR_V)$out
df2 <- df[-out_VEL_V, ]
# ELIMINAR VALORES OUTLIERS UNIVARIABLES MEDIANTE BOXPLOT
boxplot.stats(df$VEL_V)$out
out_VEL_V <- boxplot.stats(df$VEL_V)$out
df2 <- df[-out_VEL_V, ]
# ELIMINAR VALORES OUTLIERS UNIVARIABLES MEDIANTE BOXPLOT
boxplot.stats(df$VEL_V)$out
out_VEL_V <- boxplot.stats(df$VEL_V)$out
df2 <- df[-out_VEL_V, ]
View(df2)
boxplot.stats(df$VEL_V)$out
out_VEL_V
View(df2)
df2 <- df[ df$VEL_V =! out_VEL_V, ]
df2 <- df[ df$VEL_V != out_VEL_V, ]
out_VEL_V
# ELIMINAR VALORES OUTLIERS UNIVARIABLES MEDIANTE BOXPLOT
boxplot.stats(df$VEL_V)$out
library(mvoutlier)
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
library(mvoutlier)
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
result <- mvoutlier(df, qqplot = TRUE, method = "adj.quan")
library(MVN)
install.packages("MVN")
df[ df$VEL_V in out_VEL_V,]
df[ df$VEL_V %in% out_VEL_V,]
library(MVN)
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
result <- mvoutlier(df, qqplot = TRUE, method = "adj.quan")
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
library(MVN)
mvOutlier
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
result <- mvoutlier(df, qqplot = TRUE, method = "adj.quan")
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
library(MVN)
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
result <- mvOutlier(df, qqplot = TRUE, method = "adj.quan")
result <- mvn(data = df, mvnTest = "hz", multivariateOutlierMethod = "quan")
result <- mvn(df, mvnTest = "hz", multivariateOutlierMethod = "quan")
View(df)
result <- mvn(df[,2], mvnTest = "hz", multivariateOutlierMethod = "quan")
result <- mvn(df[,3], mvnTest = "hz", multivariateOutlierMethod = "quan")
result <- mvn(df[[3]], mvnTest = "hz", multivariateOutlierMethod = "quan")
View(df)
result <- mvn(df[,c(2:6)], mvnTest = "hz", multivariateOutlierMethod = "quan")
df[df$VEL_V %in% out_VEL_V,]
df[df$VEL_V %not in% out_VEL_V,]
df[-(df$VEL_V %in% out_VEL_V),]
df_so <- df[-(df$VEL_V %in% out_VEL_V),]
df[df$VEL_V %in% out_VEL_V,]
out_VEL_V <- boxplot.stats(df$VEL_V)$out
out_VEL_V
df[df$VEL_V %in% out_VEL_V,]
df[!(df$VEL_V %in% out_VEL_V),]
df <- df[!(df$VEL_V %in% out_VEL_V),]
result <- mvn(df[1:100,c(2:6)],
mvnTest = "hz", multivariateOutlierMethod = "quan")
result <- mvn(df[,c(2:6)],
mvnTest = "hz", multivariateOutlierMethod = "quan")
result <- mvn(df[1:1000,c(2:6)],
mvnTest = "hz", multivariateOutlierMethod = "quan")
library(openair)
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION VON HUMBOLDT - 2020",
avg.time = "1 day")
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 month")
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 day")
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 day")
# GRAFICAMOS LA CORRELACION ENTRE VARIABLES
pairs(df,
lower.panel = panel.smooth,
upper.panel = NULL,
col = "skyblue3")
View(df)
View(df)
View(df)
colnames(df)[5] <- "wd"
colnames(df)[6] <- "ws"
View(df)
# GRAFICAMOS LAS ROSAS DE VIENTO
windRose(df)
hist(df$wd)
# GRAFICAMOS LAS ROSAS DE VIENTO
windRose(df)
windRose(df, type = "month")
windRose(df, type = "season")
windRose(df, type = "month")
# GRAFICAMOS LAS SERIES DE TIEMPO CON LOS DATOS DE VIENTO INCLUIDOS
timePlot(df, pollutant = c("TEMP", "HUM"),
windflow = list(scale = 0.1, lwd = 2, col = "darkcyan"),
lwd = 3, group = FALSE,
xlab = "Tiempo", ylab = "Valores",
cols = c("red", "blue"),
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION VON HUMBOLDT - 2020",
avg.time = "1 month")
# GRAFICAMOS LA VARIACION TEMPORAL DE LA TEMPERATURA
timeVariation(df, pollutant = "TEMP")
# GRAFICAMOS LA VARIACION TEMPORAL DE LA TEMPERATURA
timeVariation(df, pollutant = c("TEMP","HUM")
# GRAFICAMOS LA VARIACION TEMPORAL DE LA TEMPERATURA
timeVariation(df, pollutant = c("TEMP","HUM"))
# GRAFICAMOS UN CALENDARIO PARA EVALUAR CADA VARIABLE
calendarPlot(df, pollutant = "TEMP", year = 2020)
calendarPlot(df, pollutant = "PP", year = 2020, cols = "Blues")
# GRAFICAMOS UN CALENDARIO PARA EVALUAR CADA VARIABLE
calendarPlot(df, pollutant = "TEMP", year = 2020)
calendarPlot(df, pollutant = "HUM", year = 2020, annotate = "ws")
calendarPlot(df, pollutant = "TEMP", year = 2020,
breaks = c(-20, 0, 10, 20, 25, 100),
labels = c("Muy frio", "Frio", "Templado", "Calido", "Muy calido"),
cols = "increment", statistic = "max")
# GRAFICAMOS UN CALENDARIO PARA EVALUAR CADA VARIABLE
calendarPlot(df, pollutant = "TEMP", year = 2020)
# GRAFICAMOS LAS SERIES DE TIEMPO
timePlot(df, pollutant = c("TEMP", "PP", "HUM"),
name.pol = c("TEMPERATURA", "PRECIPITACION", "HUMEDAD"),
smooth = T,
xlab = "Tiempo", ylab = "Valores",
main = "DATOS HIDROMETEOROLÓGICOS DE LA ESTACION CAMPO DE MARTE - 2020",
avg.time = "1 day")
# GRAFICAMOS LAS ROSAS DE VIENTO
windRose(df)
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng=-76.93931, lat=-12.08221, popup="ESTACION VH -AGRARIA")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng=-76.93931, lat=-12.08221, popup="ESTACION VH -AGRARIA")
m
2^16
2^16
dbinom(x = 2, size = 20, prob = 1/6)
dbinom(x = 3, size = 20, prob = 1/6)
vec1 <- c()
vec1 <- c()
for(i in 1:20){
vec1[i] <- dbinom(i, size = 20, prob = 1/6)
}
plot(vec1)
vec1 <- c()
for(i in 0:20){
vec1[i] <- dbinom(i, size = 20, prob = 1/6)
}
plot(vec1)
plot(vec1, type = "l")
vec1 <- c()
for(i in 0:20){
vec1[i] <- dbinom(i, size = 20, prob = 1/2)
}
plot(vec1, type = "l")
vec1 <- c()
for(i in 0:100){
vec1[i] <- dbinom(i, size = 100, prob = 1/2)
}
plot(vec1, type = "l")
dev.new()
vec1 <- c()
for(i in 0:20){
vec1[i] <- dbinom(i, size = 20, prob = 1/2)
}
plot(vec1, type = "l")
vec1 <- c()
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 1, sd = 0.1 )
}
plot(vec1, type = "l")
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 50, sd = 0.1 )
}
plot(vec1, type = "l")
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 50, sd = 0.5 )
}
plot(vec1, type = "l")
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 50, sd = 0.8 )
}
plot(vec1, type = "l")
vec1[i] <- dnorm(i, mean = 50, sd = 0.9 )
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 50, sd = 0.9 )
}
plot(vec1, type = "l")
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 70, sd = 0.9 )
}
plot(vec1, type = "l")
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 5, sd = 0.9 )
}
plot(vec1, type = "l")
for(i in 0:100){
vec1[i] <- dnorm(i, mean = 40, sd = 0.8 )
}
plot(vec1, type = "l")
library(ggplot2)
library(httr)
library(DataExplorer)
path_wd <- readClipboard()
setwd(path_wd)
GETWD()
getwd()
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df2 <- read.table("data-meteo-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df2 <- read.table("data-meteo-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
View(df1)
View(df2)
# MERGE A LOS DF
df <- merge(df1, df2, by = "date")
# CONVERTIR FECHAS
df$date <- as.POSIXct(df$date, format = "%Y-%m-%d %H:%M:%S")
View(df)
df <- df %>%
complete(date = seq(min(date), max(date), by = "1 hour"),
fill = list(VALOR = NA))
# COMPLETAR LAS FECHAS FALTANTES CON NA
library(tidyr)
df <- df %>%
complete(date = seq(min(date), max(date), by = "1 hour"),
fill = list(VALOR = NA))
View(df)
# MERGE A LOS DF
df <- merge(df1, df2, by = "date")
df <- df %>%
complete(date = seq(min(date), max(date), by = "1 hour"),
fill = list(VALOR = NA))
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df2 <- read.table("data-meteo-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
# MERGE A LOS DF
df <- merge(df1, df2, by = "date")
# CONVERTIR FECHAS
df$date <- as.POSIXct(df$date, format = "%Y-%m-%d %H:%M:%S")
# COMPLETAR LAS FECHAS FALTANTES CON NA
library(tidyr)
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
df2 <- read.table("data-meteo-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
# MERGE A LOS DF
df <- merge(df1, df2, by = "date")
# CONVERTIR FECHAS
df$date <- as.POSIXct(df$date, format = "%Y-%m-%d %H:%M:%S")
# COMPLETAR LAS FECHAS FALTANTES CON NA
library(tidyr)
df <- df %>%
complete(date = seq(min(date), max(date), by = "1 hour"),
fill = list(VALOR = NA))
# VISUALIZAR LA ESCTRUCTURA DE NUESTRA DATA
plot_str(df)
plot_intro(df)
profile_missing(df)
# HISTOGRAMA
plot_histogram(df)
# TIME PLOT
library(openair)
timePlot(df, pollutant = "PM25",
ref.y = list(h = 50, lty = 5),
avg.time = "1 day")
# BOXPLOT
ggplot(df, aes(y = PM25)) +
geom_boxplot()
# SCATTER PLOT
ggplot(df, aes(x=date, y=PM25)) +
geom_line() +
geom_smooth(method = "loess")
timePlot(df, pollutant = "PM25",
ref.y = list(h = 50, lty = 5),
avg.time = "1 day")
# SCATTER PLOT
ggplot(df, aes(x=date, y=PM25)) +
geom_line() +
geom_smooth(method = "loess")
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
colnames(df)[6] <- "wd"
colnames(df)[7] <- "ws"
View(df)
View(df)
# GRAFICAMOS LAS ROSAS DE VIENTO
windRose(df)
View(df)
windRose(df, type = "season")
windRose(df, type = "month")
calendarPlot(df, pollutant = "TEMP", year = 2020,
breaks = c(-20, 0, 10, 20, 25, 100),
labels = c("Muy frio", "Frio", "Templado", "Calido", "Muy calido"),
cols = "increment", statistic = "max")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
windRose(df, type = "month")
pollutionRose(df, pollutant = "PM25")
polarAnnulus(df, pollutant = "PM25")
